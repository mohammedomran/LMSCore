// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace LMSCore.Models
{
    public partial class LMSContext : DbContext
    {
        public LMSContext()
        {
        }

        public LMSContext(DbContextOptions<LMSContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Certificate> Certificates { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Lesson> Lessons { get; set; }
        public virtual DbSet<LessonItem> LessonItems { get; set; }
        public virtual DbSet<LessonItemType> LessonItemTypes { get; set; }
        public virtual DbSet<Level> Levels { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Certificate>(entity =>
            {
                entity.ToTable("Certificate");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.Level)
                    .WithMany(p => p.Certificates)
                    .HasForeignKey(d => d.LevelId)
                    .HasConstraintName("FK_Certificate_Certificate");
            });

            modelBuilder.Entity<Course>(entity =>
            {
                entity.ToTable("Course");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.IsPaid)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MainPhoto)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.ShortDescription).HasMaxLength(300);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.VideoDemoUrl)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<Lesson>(entity =>
            {
                entity.ToTable("Lesson");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Level)
                    .WithMany(p => p.Lessons)
                    .HasForeignKey(d => d.LevelId)
                    .HasConstraintName("FK_Lesson_Level");
            });

            modelBuilder.Entity<LessonItem>(entity =>
            {
                entity.ToTable("LessonItem");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.OrderOfDisplay).HasDefaultValueSql("((1))");

                entity.Property(e => e.Title)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.VideoUrl)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LessonItemType>(entity =>
            {
                entity.ToTable("LessonItemType");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Level>(entity =>
            {
                entity.ToTable("Level");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.Levels)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_Level_Course");
            });

            modelBuilder.Entity<Task>(entity =>
            {
                entity.ToTable("Task");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.Lesson)
                    .WithMany(p => p.Tasks)
                    .HasForeignKey(d => d.LessonId)
                    .HasConstraintName("FK_Task_Task");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}